@page "/"
@using IsMauiDeadDead.Services
@using Microsoft.AspNetCore.Components
@inject IStatusService StatusService
@inject IJSRuntime JSRuntime

<PageTitle>Is MAUI Dead Dead?</PageTitle>

<div class="status-container">
    <div class="header">
        <h1>Is MAUI Dead Dead?</h1>
        <p class="subtitle">Monitoring the status of <a href="https://ismauidead.net" target="_blank" rel="noopener noreferrer">ismauidead.net</a></p>
    </div>

    <div class="status-card">
        @if (isLoading)
        {
            <div class="loading">
                <div class="spinner"></div>
                <p>Checking status...</p>
            </div>
        }
        else if (siteStatus != null)
        {
            <div class="status-indicator @GetStatusClass(siteStatus.OverallStatus)">
                <div class="status-icon">
                    @GetStatusIcon(siteStatus.OverallStatus)
                </div>
                <div class="status-text">
                    <h2>@GetStatusText(siteStatus.OverallStatus)</h2>
                    @if (siteStatus.StatusCode > 0)
                    {
                        <p>Main Site Status Code: @siteStatus.StatusCode</p>
                    }
                    @if (!string.IsNullOrEmpty(siteStatus.ErrorMessage))
                    {
                        <p class="error-message">@siteStatus.ErrorMessage</p>
                    }
                    <p>Response Time: @siteStatus.ResponseTime.TotalMilliseconds.ToString("F0")ms</p>
                    <p>Last Checked: @siteStatus.LastChecked.ToString("HH:mm:ss UTC")</p>
                    
                    @if (siteStatus.DataStreams.Any())
                    {
                        <div class="data-streams">
                            <h3>Data Streams Status</h3>
                            @foreach (var stream in siteStatus.DataStreams)
                            {
                                <div class="stream-status @(stream.IsHealthy ? "healthy" : "unhealthy")">
                                    <span class="stream-name">@stream.Name</span>
                                    <span class="stream-indicator">@(stream.IsHealthy ? "✓" : "✗")</span>
                                    @if (!stream.IsHealthy && !string.IsNullOrEmpty(stream.ErrorMessage))
                                    {
                                        <small class="stream-error">@stream.ErrorMessage</small>
                                    }
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>
        }
        else
        {
            <div class="error">
                <p>Unable to check site status</p>
            </div>
        }
    </div>

    <div class="actions">
        <button class="refresh-btn" @onclick="CheckStatus" disabled="@isLoading">
            @if (isLoading)
            {
                <span>Checking...</span>
            }
            else
            {
                <span>Check Again</span>
            }
        </button>
        <a href="https://ismauidead.net" target="_blank" rel="noopener noreferrer" class="visit-btn">
            Visit ismauidead.net
        </a>
    </div>
</div>

@code {
    private SiteStatus? siteStatus;
    private bool isLoading = true;

    // Define data streams that ismauidead.net might be monitoring
    private readonly Dictionary<string, string> dataStreamUrls = new()
    {
        { "GitHub MAUI Repo", "https://api.github.com/repos/dotnet/maui" },
        { "NuGet MAUI Package", "https://api.nuget.org/v3-flatcontainer/microsoft.maui.controls/index.json" },
        { "Microsoft Learn MAUI", "https://docs.microsoft.com/en-us/dotnet/maui/" },
        { ".NET Release API", "https://api.nuget.org/v3-flatcontainer/microsoft.netcore.app/index.json" }
    };

    protected override async Task OnInitializedAsync()
    {
        await CheckStatus();
    }

    private async Task CheckStatus()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            siteStatus = await StatusService.CheckSiteWithDataStreamsAsync("https://ismauidead.net", dataStreamUrls);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error checking status: {ex.Message}");
            siteStatus = null;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private string GetStatusClass(SiteHealthStatus status) => status switch
    {
        SiteHealthStatus.UP => "online",
        SiteHealthStatus.DOWN => "degraded",
        SiteHealthStatus.OFFLINE => "offline",
        _ => "offline"
    };

    private string GetStatusText(SiteHealthStatus status) => status switch
    {
        SiteHealthStatus.UP => "Site is UP",
        SiteHealthStatus.DOWN => "Site is DOWN",
        SiteHealthStatus.OFFLINE => "Site is OFFLINE",
        _ => "Unknown Status"
    };

    private MarkupString GetStatusIcon(SiteHealthStatus status) => status switch
    {
        SiteHealthStatus.UP => new MarkupString("<span>✓</span>"),
        SiteHealthStatus.DOWN => new MarkupString("<span>⚠</span>"),
        SiteHealthStatus.OFFLINE => new MarkupString("<span>✗</span>"),
        _ => new MarkupString("<span>?</span>")
    };
}
